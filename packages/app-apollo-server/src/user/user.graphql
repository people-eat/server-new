type User {
    userId: String!
    isLocked: Boolean!
    hasPasswordSetUp: Boolean!
    emailAddress: EmailAddress
    phoneNumber: PhoneNumber
    firstName: String!
    lastName: String!
    gender: Gender!
    birthDate: Date
    profilePictureUrl: Url
    language: UserLanguage!
    acceptedPrivacyPolicy: DateTime!
    acceptedTerms: DateTime!
    createdAt: DateTime!

    activeSessions: [Session!]!
    activeSessionCount: UInt!

    admin: Admin
    isAdmin: Boolean!

    cook: Cook
    isCook: Boolean!

    notifications: [Notification!]!
    unreadNotificationCount: UInt!

    notificationConfiguration: NotificationConfiguration!

    phoneNumberUpdate: PhoneNumberUpdate
    emailAddressUpdate: EmailAddressUpdate
    oneTimeAccessToken: OneTimeAccessToken

    globalBookingRequests: [GlobalBookingRequest!]!
    globalBookingRequest(globalBookingRequestId: String!): GlobalBookingRequest
    bookingRequests: [BookingRequest!]!
    bookingRequest(bookingRequestId: String!): BookingRequest

    followings: [Following!]!
    followingCount: UInt!

    addresses: [Address!]!
    addressCount: UInt!
}

type UserQuery {
    findMany(request: FindManyRequest!): [User!]
    findOne(userId: String!): User
}

type Query {
    users: UserQuery!
}

input CreateOneUserByEmailAddressRequest {
    emailAddress: EmailAddress!
    phoneNumber: PhoneNumber
    password: String
    firstName: String!
    lastName: String!
    language: UserLanguage!
    gender: Gender!
    birthDate: Date
    profilePictureUrl: Url

    addresses: [CreateOneAddressRequest!]
    cook: CreateOneCookRequest
    globalBookingRequest: CreateOneGlobalBookingRequestRequest
}

input CreateOneUserByPhoneNumberRequest {
    phoneNumber: PhoneNumber!
    password: String!
    firstName: String!
    lastName: String!
    language: UserLanguage!
    gender: Gender!
    birthDate: Date
    profilePictureUrl: Url
    cook: CreateOneCookRequest
    globalBookingRequest: CreateOneGlobalBookingRequestRequest
}

input CreateOneUserByIdentityProviderRequest {
    identityProvider: IdentityProvider!
    idToken: String!
    firstName: String!
    lastName: String!
    language: UserLanguage!
    gender: Gender!
    birthDate: Date
    profilePictureUrl: Url
    cook: CreateOneCookRequest
    globalBookingRequest: CreateOneGlobalBookingRequestRequest
}

input CreateOneUserRequest {
    emailAddress: EmailAddress!
    phoneNumber: PhoneNumber!
    password: String
    firstName: String!
    lastName: String!
    language: UserLanguage!
    gender: Gender!
    birthDate: Date
    profilePictureUrl: Url

    addresses: [CreateOneAddressRequest!]
    cook: CreateOneCookRequest
    globalBookingRequest: CreateOneGlobalBookingRequestRequest
}

type CreateOneUserSuccessResult {
    succeeded: Boolean!
}

type CreateOneUserFailedResult {
    failed: Boolean!
}

type CreateOneUserFailedAlreadyExistsResult {
    alreadyExists: Boolean!
}

union CreateOneUserResult = CreateOneUserSuccessResult | CreateOneUserFailedResult | CreateOneUserFailedAlreadyExistsResult

type UserMutation {
    acceptLatestPrivacyPolicy: Boolean!
    acceptLatestTerms: Boolean!

    createOne(request: CreateOneUserRequest!, profilePicture: Upload): CreateOneUserResult!
    createOneByEmailAddress(request: CreateOneUserByEmailAddressRequest!, profilePicture: Upload): Boolean!
    createOneByPhoneNumber(request: CreateOneUserByPhoneNumberRequest!): Boolean!
    createOneByIdentityProvider(request: CreateOneUserByIdentityProviderRequest!): Boolean!

    updatePassword(userId: String!, password: String!): Boolean!
    updateGender(userId: String!, gender: Gender!): Boolean!
    updateProfilePicture(userId: String!, profilePicture: Upload): Boolean!

    updateIsLocked(userId: String!, isLocked: Boolean!): Boolean!
}

type Mutation {
    users: UserMutation!
}
