enum GlobalBookingRequestStatus {
    OPEN
    EXPIRED
    OFFERS_MADE
    MATCHED
}

enum GlobalBookingRequestPriceClassType {
    SIMPLE
    FINE
    GOURMET
}

type GlobalBookingRequestPriceClass {
    type: GlobalBookingRequestPriceClassType!
    min: UInt!
    max: UInt!
    currencyCode: CurrencyCode!
}

type GlobalBookingRequestConditions {
    location: Location!
    dateTime: DateTime!
    duration: UInt
    adultParticipants: UInt!
    children: UInt!
    occasion: String!
    priceClassType: GlobalBookingRequestPriceClassType!

    priceClass: GlobalBookingRequestPriceClass!
}

type CookGlobalBookingRequest {
    globalBookingRequestId: String!
    userId: String!
    message: String!
    conditions: GlobalBookingRequestConditions!
    createdAt: DateTime!

    publicUser: PublicUser!
}

type GlobalBookingRequest {
    globalBookingRequestId: String!
    userId: String!
    message: String!
    conditions: GlobalBookingRequestConditions!
    createdAt: DateTime!

    user: User!
    status: GlobalBookingRequestStatus!

    bookingRequests: [BookingRequest!]!
}

input CreateOneGlobalBookingRequestRequest {
    location: LocationInput!
    dateTime: DateTime!
    duration: UInt!
    adultParticipants: UInt!
    children: UInt!
    priceClassType: GlobalBookingRequestPriceClassType!
    occasion: String!
    message: String!

    kitchenId: String
    categoryIds: [String!]
    allergyIds: [String!]

    # Todo: remove
    phoneNumber: PhoneNumber
}

type UserGlobalBookingRequestQuery {
    userId: String!
    findMany: [GlobalBookingRequest!]
    findOne(globalBookingRequestId: String!): GlobalBookingRequest
}

type UserQuery {
    globalBookingRequests(userId: String!): UserGlobalBookingRequestQuery!
}

type UserGlobalBookingRequestMutation {
    userId: String!
    createOne(request: CreateOneGlobalBookingRequestRequest!): Boolean!
    expireOne(globalBookingRequestId: String!): Boolean!
    updateOccasion(globalBookingRequestId: String!, occasion: String!): Boolean!
    updateMessage(globalBookingRequestId: String!, message: String!): Boolean!
    updateDateTime(globalBookingRequestId: String!, dateTime: DateTime!): Boolean!
    updatePriceClass(globalBookingRequestId: String!, priceClassType: GlobalBookingRequestPriceClassType!): Boolean!
}

type UserMutation {
    globalBookingRequests(userId: String!): UserGlobalBookingRequestMutation!
}

type CookGlobalBookingRequestQuery {
    cookId: String!
    findMany(request: FindManyRequest): [GlobalBookingRequest!]
    findOne(globalBookingRequestId: String!): GlobalBookingRequest
}

type CookQuery {
    globalBookingRequests(cookId: String!): CookGlobalBookingRequestQuery!
}

type GlobalBookingRequestQuery {
    findMany: [GlobalBookingRequest!]
    findOne(globalBookingRequestId: String!): GlobalBookingRequest
}

type Query {
    globalBookingRequests: GlobalBookingRequestQuery!
}
