# type BookingRequestConditions {
#     location: Location!
#     dateTime: DateTime!
#     preparationTime: UInt!
#     duration: UInt!
#     adultParticipants: UInt!
#     children: UInt!
#     occasion: String!

#     suggestedMenuId: String
#     suggestedMenu: PublicMenu
#     configuredMenu: ConfiguredMenu
# }

# type BookingRequestPaymentData {
#     totalPriceCustomer: Price!
#     totalPriceCook: Price!
#     travelExpenses: Price!

#     stripeClientSecret: String!

#     giftCardPromoCode: GiftCardPromoCode
#     giftCard: GiftCard
# }

# type BookingRequest {
#     bookingRequestId: String!
#     globalBookingRequestId: String
#     userId: String!
#     cookId: String!
#     status: BookingRequestStatus!
#     userAccepted: Boolean
#     cookAccepted: Boolean
#     createdAt: DateTime!

#     publicUser: PublicUser!
#     publicCook: PublicCook!

#     user: User!
#     cook: Cook!

#     allergies: [Allergy!]!
# }

type BookingRequestConditions {
    location: Location!
    dateTime: DateTime!
    duration: UInt
    adultParticipants: UInt!
    children: UInt!
    occasion: String!
}

type BookingRequest {
    bookingRequestId: String!
    globalBookingRequestId: String
    userId: String!
    cookId: String!
    status: BookingRequestStatus!
    userAccepted: Boolean
    cookAccepted: Boolean

    conditions: BookingRequestConditions!
    preparationTime: UInt!
    message: String!
    kitchenId: String
    createdAt: DateTime!

    totalPriceCustomer: Price!
    totalPriceCook: Price!
    travelExpenses: Price!

    publicUser: PublicUser!
    publicCook: PublicCook!

    user: User!
    cook: Cook!

    allergies: [Allergy!]!

    suggestedMenuId: String
    suggestedMenu: PublicMenu
    configuredMenu: ConfiguredMenu

    giftCardPromoCode: GiftCardPromoCode
    giftCard: GiftCard
}

enum BookingRequestStatus {
    OPEN
    PENDING
    COMPLETED
    CANCELED
}

type UserBookingRequestQuery {
    userId: String!
    findMany(request: FindManyRequest): [BookingRequest!]
    findOne(bookingRequestId: String!): BookingRequest
}

type UserQuery {
    bookingRequests(userId: String!): UserBookingRequestQuery!
}

type CookBookingRequestQuery {
    cookId: String!
    findMany(request: FindManyRequest): [BookingRequest!]
    findOne(bookingRequestId: String!): BookingRequest
}

type CookQuery {
    bookingRequests(cookId: String!): CookBookingRequestQuery!
}

input CreateCookBookingRequestRequest {
    cookId: String!
    location: LocationInput!
    dateTime: DateTime!
    preparationTime: UInt!
    duration: UInt!
    adultParticipants: UInt!
    children: UInt!
    price: PriceInput!
    message: String!
    kitchenId: String
    occasion: String!
    travelExpensesAmount: UInt!
}

input CreateMenuBookingRequestRequest {
    cookId: String!
    location: LocationInput!
    dateTime: DateTime!
    preparationTime: UInt!
    duration: UInt!
    adultParticipants: UInt!
    children: UInt!
    message: String!
    occasion: String!
    travelExpensesAmount: UInt!
    configuredMenu: CreateConfiguredMenuRequest!
    giftCardPromoCodeId: String
}

input CreateBookingRequestRequest {
    cook: CreateCookBookingRequestRequest
    menu: CreateMenuBookingRequestRequest
}

type UserBookingRequestMutation {
    userId: String!
    createOne(request: CreateBookingRequestRequest!): UserCreateOneBookingRequestResponse!
    accept(bookingRequestId: String!): Boolean!
    decline(bookingRequestId: String!): Boolean!
    updatePrice(bookingRequestId: String!, price: PriceInput!): Boolean!
    confirmPaymentSetup(bookingRequestId: String!): Boolean!
    updateConfiguredMenu(bookingRequestId: String!, configuredMenu: CreateConfiguredMenuRequest!): Boolean!
}

type UserCreateOneBookingRequestResponse {
    success: Boolean!
    clientSecret: String!
    bookingRequestId: String!
}

type UserMutation {
    bookingRequests(userId: String!): UserBookingRequestMutation!
}

type CookBookingRequestMutation {
    cookId: String!
    createOne(globalBookingRequestId: String!, configuredMenu: CreateConfiguredMenuRequest, price: PriceInput): Boolean!
    accept(bookingRequestId: String!): Boolean!
    decline(bookingRequestId: String!): Boolean!
    updatePrice(bookingRequestId: String!, price: PriceInput!): Boolean!
    updateSuggestedMenu(bookingRequestId: String!, suggestedMenuId: String!): Boolean!
}

type CookMutation {
    bookingRequests(cookId: String!): CookBookingRequestMutation!
}

type ConfiguredMenu {
    bookingRequestId: String!
    menuId: String
    title: String!
    description: String!
    greetingFromKitchen: String
    kitchenId: String
    courses: [ConfiguredMenuCourse!]!
}

type ConfiguredMenuCourse {
    index: UInt!
    title: String!
    mealTitle: String!
    mealDescription: String!
    mealImageUrl: String
    mealType: MealType
}

input CreateConfiguredMenuRequest {
    menuId: String!
    courses: [CreateConfiguredMenuCourseRequest!]!
}

input CreateConfiguredMenuCourseRequest {
    courseId: String!
    mealId: String!
}

type BookingRequestQuery {
    findMany: [BookingRequest!]
    findOne(bookingRequestId: String!): BookingRequest
}

type Query {
    bookingRequests: BookingRequestQuery!
}
